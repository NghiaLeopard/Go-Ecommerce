// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: Users.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
  email, password
) VALUES (
  $1, $2
)
RETURNING id, email, password, "userType", status, address, avatar, image, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", "deviceToken", addresses, create_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserType,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.Image,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		pq.Array(&i.LikeProducts),
		pq.Array(&i.ViewedProducts),
		pq.Array(&i.DeviceToken),
		&i.Addresses,
		&i.CreateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUserById = `-- name: FindUserById :exec
SELECT id, email, password, "userType", status, address, avatar, image, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", "deviceToken", addresses, create_at FROM "Users"
WHERE id = $1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, findUserById, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT "Users".id, "Users".email, "Users".password, "Users"."userType", "Users".status, "Users".address, "Users".avatar, "Users".image, "Users"."phoneNumber", "Users".role, "Users"."firstName", "Users"."lastName", "Users"."middleName", "Users".city, "Users"."likeProducts", "Users"."viewedProducts", "Users"."deviceToken", "Users".addresses, "Users".create_at,"Role".id, "Role".name, "Role".permission, "Role".create_at, "Role".update_at
FROM "Users"
JOIN "Role" ON "Role".id = "Users".role
WHERE "Users".email = $1
`

type GetUserByEmailRow struct {
	ID             int64                 `json:"id"`
	Email          string                `json:"email"`
	Password       string                `json:"password"`
	UserType       NullUsersType         `json:"userType"`
	Status         NullUsersStatus       `json:"status"`
	Address        sql.NullString        `json:"address"`
	Avatar         sql.NullString        `json:"avatar"`
	Image          sql.NullString        `json:"image"`
	PhoneNumber    sql.NullInt64         `json:"phoneNumber"`
	Role           sql.NullInt64         `json:"role"`
	FirstName      sql.NullString        `json:"firstName"`
	LastName       sql.NullString        `json:"lastName"`
	MiddleName     sql.NullString        `json:"middleName"`
	City           sql.NullInt64         `json:"city"`
	LikeProducts   []int64               `json:"likeProducts"`
	ViewedProducts []int64               `json:"viewedProducts"`
	DeviceToken    []string              `json:"deviceToken"`
	Addresses      pqtype.NullRawMessage `json:"addresses"`
	CreateAt       time.Time             `json:"create_at"`
	ID_2           int64                 `json:"id_2"`
	Name           string                `json:"name"`
	Permission     []string              `json:"permission"`
	CreateAt_2     time.Time             `json:"create_at_2"`
	UpdateAt       time.Time             `json:"update_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserType,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.Image,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		pq.Array(&i.LikeProducts),
		pq.Array(&i.ViewedProducts),
		pq.Array(&i.DeviceToken),
		&i.Addresses,
		&i.CreateAt,
		&i.ID_2,
		&i.Name,
		pq.Array(&i.Permission),
		&i.CreateAt_2,
		&i.UpdateAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT "Users".id, "Users".email, "Users".password, "Users"."userType", "Users".status, "Users".address, "Users".avatar, "Users".image, "Users"."phoneNumber", "Users".role, "Users"."firstName", "Users"."lastName", "Users"."middleName", "Users".city, "Users"."likeProducts", "Users"."viewedProducts", "Users"."deviceToken", "Users".addresses, "Users".create_at,"Role".id, "Role".name, "Role".permission, "Role".create_at, "Role".update_at
FROM "Users"
JOIN "Role" ON "Role".id = "Users".role
WHERE "Users".id = $1
`

type GetUserByIdRow struct {
	ID             int64                 `json:"id"`
	Email          string                `json:"email"`
	Password       string                `json:"password"`
	UserType       NullUsersType         `json:"userType"`
	Status         NullUsersStatus       `json:"status"`
	Address        sql.NullString        `json:"address"`
	Avatar         sql.NullString        `json:"avatar"`
	Image          sql.NullString        `json:"image"`
	PhoneNumber    sql.NullInt64         `json:"phoneNumber"`
	Role           sql.NullInt64         `json:"role"`
	FirstName      sql.NullString        `json:"firstName"`
	LastName       sql.NullString        `json:"lastName"`
	MiddleName     sql.NullString        `json:"middleName"`
	City           sql.NullInt64         `json:"city"`
	LikeProducts   []int64               `json:"likeProducts"`
	ViewedProducts []int64               `json:"viewedProducts"`
	DeviceToken    []string              `json:"deviceToken"`
	Addresses      pqtype.NullRawMessage `json:"addresses"`
	CreateAt       time.Time             `json:"create_at"`
	ID_2           int64                 `json:"id_2"`
	Name           string                `json:"name"`
	Permission     []string              `json:"permission"`
	CreateAt_2     time.Time             `json:"create_at_2"`
	UpdateAt       time.Time             `json:"update_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserType,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.Image,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		pq.Array(&i.LikeProducts),
		pq.Array(&i.ViewedProducts),
		pq.Array(&i.DeviceToken),
		&i.Addresses,
		&i.CreateAt,
		&i.ID_2,
		&i.Name,
		pq.Array(&i.Permission),
		&i.CreateAt_2,
		&i.UpdateAt,
	)
	return i, err
}

const initDefaultAdmin = `-- name: InitDefaultAdmin :one
INSERT INTO "Users" (
  email, password, role
) VALUES (
  $1, $2, $3
)
RETURNING id, email, password, "userType", status, address, avatar, image, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", "deviceToken", addresses, create_at
`

type InitDefaultAdminParams struct {
	Email    string        `json:"email"`
	Password string        `json:"password"`
	Role     sql.NullInt64 `json:"role"`
}

func (q *Queries) InitDefaultAdmin(ctx context.Context, arg InitDefaultAdminParams) (User, error) {
	row := q.db.QueryRowContext(ctx, initDefaultAdmin, arg.Email, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserType,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.Image,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		pq.Array(&i.LikeProducts),
		pq.Array(&i.ViewedProducts),
		pq.Array(&i.DeviceToken),
		&i.Addresses,
		&i.CreateAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, "userType", status, address, avatar, image, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", "deviceToken", addresses, create_at FROM "Users"
ORDER BY create_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.UserType,
			&i.Status,
			&i.Address,
			&i.Avatar,
			&i.Image,
			&i.PhoneNumber,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.MiddleName,
			&i.City,
			pq.Array(&i.LikeProducts),
			pq.Array(&i.ViewedProducts),
			pq.Array(&i.DeviceToken),
			&i.Addresses,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthMe = `-- name: UpdateAuthMe :one
UPDATE "Users" SET "avatar" = $1,"address" = $2, "city" = $3,"firstName" = $4,"lastName" = $5,"middleName" = $6,"phoneNumber" = $7,"image" = $8
WHERE id = $9
RETURNING id, email, password, "userType", status, address, avatar, image, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", "deviceToken", addresses, create_at
`

type UpdateAuthMeParams struct {
	Avatar      sql.NullString `json:"avatar"`
	Address     sql.NullString `json:"address"`
	City        sql.NullInt64  `json:"city"`
	FirstName   sql.NullString `json:"firstName"`
	LastName    sql.NullString `json:"lastName"`
	MiddleName  sql.NullString `json:"middleName"`
	PhoneNumber sql.NullInt64  `json:"phoneNumber"`
	Image       sql.NullString `json:"image"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateAuthMe(ctx context.Context, arg UpdateAuthMeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAuthMe,
		arg.Avatar,
		arg.Address,
		arg.City,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.PhoneNumber,
		arg.Image,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserType,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.Image,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		pq.Array(&i.LikeProducts),
		pq.Array(&i.ViewedProducts),
		pq.Array(&i.DeviceToken),
		&i.Addresses,
		&i.CreateAt,
	)
	return i, err
}

const updatePasswordUser = `-- name: UpdatePasswordUser :exec
UPDATE "Users" SET password = $1
WHERE id = $2
`

type UpdatePasswordUserParams struct {
	Password string `json:"password"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdatePasswordUser(ctx context.Context, arg UpdatePasswordUserParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordUser, arg.Password, arg.ID)
	return err
}
