// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/db/sqlc"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/api"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/api/handler"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/api/middleware"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/repository"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/usecase"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/pkg/config"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func InitServer(sqlcDB *db.Queries, config2 config.Config, redis2 *redis.Client) (*api.ServerHTTP, error) {
	redisToken := repository.NewRedisTokenRepository(redis2)
	middlewareMiddleware := middleware.NewMiddleware(redisToken)
	auth := repository.NewAuthRepository()
	iUseCaseAuth := usecase.NewAuthUseCase(auth, redisToken)
	iHandlerAuth := handler.NewAuthHandler(iUseCaseAuth)
	user := repository.NewUserRepository()
	iUseCaseUser := usecase.NewUserUseCase(user)
	iHandlerUser := handler.NewUserHandler(iUseCaseUser)
	product := repository.NewProductRepository()
	redisProduct := repository.NewRedisProductRepository(redis2)
	iUseCaseProduct := usecase.NewProductUseCase(product, redisProduct)
	iHandlerProduct := handler.NewProductHandler(iUseCaseProduct)
	city := repository.NewCityRepository()
	iUseCaseCity := usecase.NewCityUseCase(city)
	iHandlerCity := handler.NewCityHandler(iUseCaseCity)
	delivery := repository.NewDeliveryRepository()
	iUseCaseDelivery := usecase.NewDeliveryUseCase(delivery)
	iHandlerDelivery := handler.NewDeliveryHandler(iUseCaseDelivery)
	payment := repository.NewPaymentRepository()
	iUseCasePayment := usecase.NewPaymentUseCase(payment)
	iHandlerPayment := handler.NewPaymentHandler(iUseCasePayment)
	role := repository.NewRoleRepository()
	iUseCaseRole := usecase.NewRoleUseCase(role)
	iHandlerRole := handler.NewRoleHandler(iUseCaseRole)
	productType := repository.NewProductTypeRepository()
	iUseCaseProductType := usecase.NewProductTypeUseCase(productType)
	iHandlerProductType := handler.NewProductTypeHandler(iUseCaseProductType)
	serverHTTP := api.NewServerHTTP(config2, middlewareMiddleware, iHandlerAuth, iHandlerUser, iHandlerProduct, iHandlerCity, iHandlerDelivery, iHandlerPayment, iHandlerRole, iHandlerProductType)
	return serverHTTP, nil
}
