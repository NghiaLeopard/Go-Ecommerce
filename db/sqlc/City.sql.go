// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: City.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createCity = `-- name: CreateCity :one
INSERT INTO "City" (
  name
) VALUES (
  $1
)
RETURNING id, name, create_at, update_at
`

func (q *Queries) CreateCity(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity, name)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteCityById = `-- name: DeleteCityById :exec
DELETE FROM "City"
WHERE id = $1
`

func (q *Queries) DeleteCityById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCityById, id)
	return err
}

const deleteManyCityByIds = `-- name: DeleteManyCityByIds :exec
DELETE FROM "City"
WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteManyCityByIds(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.ExecContext(ctx, deleteManyCityByIds, pq.Array(dollar_1))
	return err
}

const getCityById = `-- name: GetCityById :one
SELECT id, name, create_at, update_at FROM "City"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCityById(ctx context.Context, id int64) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityById, id)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getCityByName = `-- name: GetCityByName :one
SELECT id, name, create_at, update_at FROM "City"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCityByName(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityByName, name)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listCity = `-- name: ListCity :many
SELECT id, name, create_at, update_at FROM "City"
WHERE  $3 ::text = '' or name ILIKE concat('%',$3,'%')
ORDER BY 
  CASE 
        WHEN $4 ::varchar = 'name asc' THEN name END ASC,
  CASE 
        WHEN $4 = 'name desc' THEN name END DESC
LIMIT $1
OFFSET $2
`

type ListCityParams struct {
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
	Search  string `json:"search"`
	OrderBy string `json:"order_by"`
}

func (q *Queries) ListCity(ctx context.Context, arg ListCityParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCity,
		arg.Limit,
		arg.Offset,
		arg.Search,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :one
UPDATE "City" SET name = $1,update_at = NOW()
WHERE id = $2
RETURNING id, name, create_at, update_at
`

type UpdateCityParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCity, arg.Name, arg.ID)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
