// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/api"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/api/handler"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/api/middleware"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/db/sqlc"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/repository"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/usecase"
	"github.com/NghiaLeopard/Go-Ecommerce-Backend/pkg/config"
)

// Injectors from wire.go:

func InitServer(sqlcDB *db.Queries, config2 config.Config) (*api.ServerHTTP, error) {
	middlewareMiddleware := middleware.NewMiddleware()
	auth := repository.NewAuthRepository()
	iUseCaseAuth := usecase.NewAuthUseCase(auth)
	iHandlerAuth := handler.NewAuthHandler(iUseCaseAuth)
	city := repository.NewCityRepository()
	iUseCaseCity := usecase.NewCityUseCase(city)
	iHandlerCity := handler.NewCityHandler(iUseCaseCity)
	role := repository.NewRoleRepository()
	iUseCaseRole := usecase.NewRoleUseCase(role)
	iHandlerRole := handler.NewRoleHandler(iUseCaseRole)
	serverHTTP := api.NewServerHTTP(config2, middlewareMiddleware, iHandlerAuth, iHandlerCity, iHandlerRole)
	return serverHTTP, nil
}
