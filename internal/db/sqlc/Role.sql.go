// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: Role.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "Role" (
  name, permission
) VALUES (
  $1, $2
)
RETURNING id, name, permission
`

type CreateRoleParams struct {
	Name       string   `json:"name"`
	Permission []string `json:"permission"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, pq.Array(arg.Permission))
	var i Role
	err := row.Scan(&i.ID, &i.Name, pq.Array(&i.Permission))
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "Role"
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, permission FROM "Role"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name, pq.Array(&i.Permission))
	return i, err
}

const listRole = `-- name: ListRole :many
SELECT id, name, permission FROM "Role"
`

func (q *Queries) ListRole(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, pq.Array(&i.Permission)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
