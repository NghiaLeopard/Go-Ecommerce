// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: Users.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
  email, password
) VALUES (
  $1, $2
)
RETURNING id, email, password, "resetToken", status, address, avatar, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", addresses, "resetTokenExpiration", create_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.ResetToken,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		&i.LikeProducts,
		&i.ViewedProducts,
		&i.Addresses,
		&i.ResetTokenExpiration,
		&i.CreateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findEmail = `-- name: FindEmail :one
SELECT "Users".id, "Users".email, "Users".password, "Users"."resetToken", "Users".status, "Users".address, "Users".avatar, "Users"."phoneNumber", "Users".role, "Users"."firstName", "Users"."lastName", "Users"."middleName", "Users".city, "Users"."likeProducts", "Users"."viewedProducts", "Users".addresses, "Users"."resetTokenExpiration", "Users".create_at,"Role".id, "Role".name, "Role".permission
FROM "Users"
JOIN "Role" ON "Role".id = "Users".role
WHERE "Users".email = $1
`

type FindEmailRow struct {
	ID                   int64                 `json:"id"`
	Email                string                `json:"email"`
	Password             string                `json:"password"`
	ResetToken           sql.NullString        `json:"resetToken"`
	Status               NullUsersStatus       `json:"status"`
	Address              sql.NullString        `json:"address"`
	Avatar               sql.NullString        `json:"avatar"`
	PhoneNumber          sql.NullInt64         `json:"phoneNumber"`
	Role                 sql.NullInt64         `json:"role"`
	FirstName            sql.NullString        `json:"firstName"`
	LastName             sql.NullString        `json:"lastName"`
	MiddleName           sql.NullString        `json:"middleName"`
	City                 sql.NullInt64         `json:"city"`
	LikeProducts         sql.NullInt64         `json:"likeProducts"`
	ViewedProducts       sql.NullInt64         `json:"viewedProducts"`
	Addresses            pqtype.NullRawMessage `json:"addresses"`
	ResetTokenExpiration sql.NullTime          `json:"resetTokenExpiration"`
	CreateAt             time.Time             `json:"create_at"`
	ID_2                 int64                 `json:"id_2"`
	Name                 string                `json:"name"`
	Permission           []string              `json:"permission"`
}

func (q *Queries) FindEmail(ctx context.Context, email string) (FindEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findEmail, email)
	var i FindEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.ResetToken,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		&i.LikeProducts,
		&i.ViewedProducts,
		&i.Addresses,
		&i.ResetTokenExpiration,
		&i.CreateAt,
		&i.ID_2,
		&i.Name,
		pq.Array(&i.Permission),
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, "resetToken", status, address, avatar, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", addresses, "resetTokenExpiration", create_at FROM "Users"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.ResetToken,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		&i.LikeProducts,
		&i.ViewedProducts,
		&i.Addresses,
		&i.ResetTokenExpiration,
		&i.CreateAt,
	)
	return i, err
}

const initDefaultAdmin = `-- name: InitDefaultAdmin :one
INSERT INTO "Users" (
  email, password,role
) VALUES (
  $1, $2, $3
)
RETURNING id, email, password, "resetToken", status, address, avatar, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", addresses, "resetTokenExpiration", create_at
`

type InitDefaultAdminParams struct {
	Email    string        `json:"email"`
	Password string        `json:"password"`
	Role     sql.NullInt64 `json:"role"`
}

func (q *Queries) InitDefaultAdmin(ctx context.Context, arg InitDefaultAdminParams) (User, error) {
	row := q.db.QueryRowContext(ctx, initDefaultAdmin, arg.Email, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.ResetToken,
		&i.Status,
		&i.Address,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.City,
		&i.LikeProducts,
		&i.ViewedProducts,
		&i.Addresses,
		&i.ResetTokenExpiration,
		&i.CreateAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, "resetToken", status, address, avatar, "phoneNumber", role, "firstName", "lastName", "middleName", city, "likeProducts", "viewedProducts", addresses, "resetTokenExpiration", create_at FROM "Users"
ORDER BY create_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.ResetToken,
			&i.Status,
			&i.Address,
			&i.Avatar,
			&i.PhoneNumber,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.MiddleName,
			&i.City,
			&i.LikeProducts,
			&i.ViewedProducts,
			&i.Addresses,
			&i.ResetTokenExpiration,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePasswordUser = `-- name: UpdatePasswordUser :exec
UPDATE "Users" SET password = $1
WHERE id = $2
`

type UpdatePasswordUserParams struct {
	Password string `json:"password"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdatePasswordUser(ctx context.Context, arg UpdatePasswordUserParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordUser, arg.Password, arg.ID)
	return err
}
