// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/db/sqlc (interfaces: Querier)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	db "github.com/NghiaLeopard/Go-Ecommerce-Backend/internal/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateCity mocks base method.
func (m *MockQuerier) CreateCity(arg0 context.Context, arg1 string) (db.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", arg0, arg1)
	ret0, _ := ret[0].(db.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCity indicates an expected call of CreateCity.
func (mr *MockQuerierMockRecorder) CreateCity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockQuerier)(nil).CreateCity), arg0, arg1)
}

// CreateProductType mocks base method.
func (m *MockQuerier) CreateProductType(arg0 context.Context, arg1 db.CreateProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductType", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductType indicates an expected call of CreateProductType.
func (mr *MockQuerierMockRecorder) CreateProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductType", reflect.TypeOf((*MockQuerier)(nil).CreateProductType), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockQuerier) CreateRole(arg0 context.Context, arg1 string) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockQuerierMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockQuerier)(nil).CreateRole), arg0, arg1)
}

// CreateRoleByDefault mocks base method.
func (m *MockQuerier) CreateRoleByDefault(arg0 context.Context, arg1 db.CreateRoleByDefaultParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleByDefault", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleByDefault indicates an expected call of CreateRoleByDefault.
func (mr *MockQuerierMockRecorder) CreateRoleByDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleByDefault", reflect.TypeOf((*MockQuerier)(nil).CreateRoleByDefault), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), arg0, arg1)
}

// DeleteCityById mocks base method.
func (m *MockQuerier) DeleteCityById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCityById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCityById indicates an expected call of DeleteCityById.
func (mr *MockQuerierMockRecorder) DeleteCityById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCityById", reflect.TypeOf((*MockQuerier)(nil).DeleteCityById), arg0, arg1)
}

// DeleteManyCityByIds mocks base method.
func (m *MockQuerier) DeleteManyCityByIds(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManyCityByIds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManyCityByIds indicates an expected call of DeleteManyCityByIds.
func (mr *MockQuerierMockRecorder) DeleteManyCityByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManyCityByIds", reflect.TypeOf((*MockQuerier)(nil).DeleteManyCityByIds), arg0, arg1)
}

// DeleteManyProductTypesByIds mocks base method.
func (m *MockQuerier) DeleteManyProductTypesByIds(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManyProductTypesByIds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManyProductTypesByIds indicates an expected call of DeleteManyProductTypesByIds.
func (mr *MockQuerierMockRecorder) DeleteManyProductTypesByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManyProductTypesByIds", reflect.TypeOf((*MockQuerier)(nil).DeleteManyProductTypesByIds), arg0, arg1)
}

// DeleteManyRolesByIds mocks base method.
func (m *MockQuerier) DeleteManyRolesByIds(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManyRolesByIds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManyRolesByIds indicates an expected call of DeleteManyRolesByIds.
func (mr *MockQuerierMockRecorder) DeleteManyRolesByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManyRolesByIds", reflect.TypeOf((*MockQuerier)(nil).DeleteManyRolesByIds), arg0, arg1)
}

// DeleteProductTypeById mocks base method.
func (m *MockQuerier) DeleteProductTypeById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductTypeById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductTypeById indicates an expected call of DeleteProductTypeById.
func (mr *MockQuerierMockRecorder) DeleteProductTypeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductTypeById", reflect.TypeOf((*MockQuerier)(nil).DeleteProductTypeById), arg0, arg1)
}

// DeleteRoleById mocks base method.
func (m *MockQuerier) DeleteRoleById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleById indicates an expected call of DeleteRoleById.
func (mr *MockQuerierMockRecorder) DeleteRoleById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleById", reflect.TypeOf((*MockQuerier)(nil).DeleteRoleById), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), arg0, arg1)
}

// GetCityById mocks base method.
func (m *MockQuerier) GetCityById(arg0 context.Context, arg1 int64) (db.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityById", arg0, arg1)
	ret0, _ := ret[0].(db.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityById indicates an expected call of GetCityById.
func (mr *MockQuerierMockRecorder) GetCityById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityById", reflect.TypeOf((*MockQuerier)(nil).GetCityById), arg0, arg1)
}

// GetCityByName mocks base method.
func (m *MockQuerier) GetCityByName(arg0 context.Context, arg1 string) (db.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityByName", arg0, arg1)
	ret0, _ := ret[0].(db.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityByName indicates an expected call of GetCityByName.
func (mr *MockQuerierMockRecorder) GetCityByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityByName", reflect.TypeOf((*MockQuerier)(nil).GetCityByName), arg0, arg1)
}

// GetProductTypeById mocks base method.
func (m *MockQuerier) GetProductTypeById(arg0 context.Context, arg1 int64) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTypeById", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTypeById indicates an expected call of GetProductTypeById.
func (mr *MockQuerierMockRecorder) GetProductTypeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTypeById", reflect.TypeOf((*MockQuerier)(nil).GetProductTypeById), arg0, arg1)
}

// GetProductTypeByName mocks base method.
func (m *MockQuerier) GetProductTypeByName(arg0 context.Context, arg1 string) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTypeByName", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTypeByName indicates an expected call of GetProductTypeByName.
func (mr *MockQuerierMockRecorder) GetProductTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTypeByName", reflect.TypeOf((*MockQuerier)(nil).GetProductTypeByName), arg0, arg1)
}

// GetRoleById mocks base method.
func (m *MockQuerier) GetRoleById(arg0 context.Context, arg1 int64) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockQuerierMockRecorder) GetRoleById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockQuerier)(nil).GetRoleById), arg0, arg1)
}

// GetRoleByName mocks base method.
func (m *MockQuerier) GetRoleByName(arg0 context.Context, arg1 string) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockQuerierMockRecorder) GetRoleByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockQuerier)(nil).GetRoleByName), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(arg0 context.Context, arg1 string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockQuerier) GetUserById(arg0 context.Context, arg1 int64) (db.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockQuerierMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockQuerier)(nil).GetUserById), arg0, arg1)
}

// InitDefaultAdmin mocks base method.
func (m *MockQuerier) InitDefaultAdmin(arg0 context.Context, arg1 db.InitDefaultAdminParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDefaultAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitDefaultAdmin indicates an expected call of InitDefaultAdmin.
func (mr *MockQuerierMockRecorder) InitDefaultAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDefaultAdmin", reflect.TypeOf((*MockQuerier)(nil).InitDefaultAdmin), arg0, arg1)
}

// ListCity mocks base method.
func (m *MockQuerier) ListCity(arg0 context.Context, arg1 db.ListCityParams) ([]db.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCity", arg0, arg1)
	ret0, _ := ret[0].([]db.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCity indicates an expected call of ListCity.
func (mr *MockQuerierMockRecorder) ListCity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCity", reflect.TypeOf((*MockQuerier)(nil).ListCity), arg0, arg1)
}

// ListProductType mocks base method.
func (m *MockQuerier) ListProductType(arg0 context.Context, arg1 db.ListProductTypeParams) ([]db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductType", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductType indicates an expected call of ListProductType.
func (mr *MockQuerierMockRecorder) ListProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductType", reflect.TypeOf((*MockQuerier)(nil).ListProductType), arg0, arg1)
}

// ListRole mocks base method.
func (m *MockQuerier) ListRole(arg0 context.Context, arg1 db.ListRoleParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRole", arg0, arg1)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole.
func (mr *MockQuerierMockRecorder) ListRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockQuerier)(nil).ListRole), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), arg0)
}

// UpdateAuthMe mocks base method.
func (m *MockQuerier) UpdateAuthMe(arg0 context.Context, arg1 db.UpdateAuthMeParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthMe", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthMe indicates an expected call of UpdateAuthMe.
func (mr *MockQuerierMockRecorder) UpdateAuthMe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthMe", reflect.TypeOf((*MockQuerier)(nil).UpdateAuthMe), arg0, arg1)
}

// UpdateCity mocks base method.
func (m *MockQuerier) UpdateCity(arg0 context.Context, arg1 db.UpdateCityParams) (db.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCity", arg0, arg1)
	ret0, _ := ret[0].(db.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCity indicates an expected call of UpdateCity.
func (mr *MockQuerierMockRecorder) UpdateCity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCity", reflect.TypeOf((*MockQuerier)(nil).UpdateCity), arg0, arg1)
}

// UpdatePasswordUser mocks base method.
func (m *MockQuerier) UpdatePasswordUser(arg0 context.Context, arg1 db.UpdatePasswordUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordUser indicates an expected call of UpdatePasswordUser.
func (mr *MockQuerierMockRecorder) UpdatePasswordUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordUser", reflect.TypeOf((*MockQuerier)(nil).UpdatePasswordUser), arg0, arg1)
}

// UpdateProductType mocks base method.
func (m *MockQuerier) UpdateProductType(arg0 context.Context, arg1 db.UpdateProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductType", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductType indicates an expected call of UpdateProductType.
func (mr *MockQuerierMockRecorder) UpdateProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductType", reflect.TypeOf((*MockQuerier)(nil).UpdateProductType), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockQuerier) UpdateRole(arg0 context.Context, arg1 db.UpdateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockQuerierMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockQuerier)(nil).UpdateRole), arg0, arg1)
}
