// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: PaymentType.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO "Payment_Type" (
  name,type
) VALUES (
  $1,$2
)
RETURNING _id, name, type, "createAt", update_at
`

type CreatePaymentParams struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.Name, arg.Type)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteManyPaymentByIds = `-- name: DeleteManyPaymentByIds :exec
DELETE FROM "Payment_Type"
WHERE "_id" = ANY($1::bigint[])
`

func (q *Queries) DeleteManyPaymentByIds(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.ExecContext(ctx, deleteManyPaymentByIds, pq.Array(dollar_1))
	return err
}

const deletePaymentById = `-- name: DeletePaymentById :exec
DELETE FROM "Payment_Type"
WHERE "_id" = $1
`

func (q *Queries) DeletePaymentById(ctx context.Context, ID int64) error {
	_, err := q.db.ExecContext(ctx, deletePaymentById, ID)
	return err
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT _id, name, type, "createAt", update_at FROM "Payment_Type"
WHERE "_id" = $1 LIMIT 1
`

func (q *Queries) GetPaymentById(ctx context.Context, ID int64) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, getPaymentById, ID)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getPaymentByName = `-- name: GetPaymentByName :one
SELECT _id, name, type, "createAt", update_at FROM "Payment_Type"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetPaymentByName(ctx context.Context, name string) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByName, name)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listPayment = `-- name: ListPayment :many
SELECT _id, name, type, "createAt", update_at,COUNT("Payment_Type"."_id") OVER() AS "totalCount" FROM "Payment_Type"
WHERE  $1 ::text = '' or name ILIKE concat('%',$1,'%')
ORDER BY 
  CASE 
        WHEN $2 ::varchar = 'name asc' THEN name END ASC,
  CASE 
        WHEN $2 = 'name desc' THEN name END DESC
LIMIT NULLIF($4 :: int, 0)
OFFSET NULLIF($3 :: int, 0)
`

type ListPaymentParams struct {
	Search    string `json:"search"`
	OrderBy   string `json:"order_by"`
	OffsetOpt int32  `json:"offset_opt"`
	LimitOpt  int32  `json:"limit_opt"`
}

type ListPaymentRow struct {
	ID         int64     `json:"_id"`
	Name       string    `json:"name"`
	Type       string    `json:"type"`
	CreateAt   time.Time `json:"createAt"`
	UpdateAt   time.Time `json:"update_at"`
	TotalCount int64     `json:"totalCount"`
}

func (q *Queries) ListPayment(ctx context.Context, arg ListPaymentParams) ([]ListPaymentRow, error) {
	rows, err := q.db.QueryContext(ctx, listPayment,
		arg.Search,
		arg.OrderBy,
		arg.OffsetOpt,
		arg.LimitOpt,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPaymentRow{}
	for rows.Next() {
		var i ListPaymentRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreateAt,
			&i.UpdateAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE "Payment_Type" SET name = $1,type = $2,update_at = NOW()
WHERE "_id" = $3
RETURNING _id, name, type, "createAt", update_at
`

type UpdatePaymentParams struct {
	Name string `json:"name"`
	Type string `json:"type"`
	ID   int64  `json:"_id"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, updatePayment, arg.Name, arg.Type, arg.ID)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
